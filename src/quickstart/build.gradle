import org.apache.tools.ant.filters.ReplaceTokens

project.ext {
  GLOBAL_CFG = [
    lib: new File(project(':').projectDir.parentFile, 'lib'),
    conf: new File(project(':').projectDir.parentFile, 'conf'),
    baseProject: project(':mgt')
  ]

  version = '1.0-SNAPSHOT'
  activitiVersion = '5.15.1'
  bcprovVersion = '1.46'
  commonsCodecVersion = '1.9'
  commonsFileuploadVersion = '1.3.1'
  findbugsVersion = '2.0.1'
  groovyVersion = '2.3.0'
  guavaVersion = '17.0'
  freemarkerVersion = '2.3.20'
  hibernateVersion = '4.3.5.Final'
  hibernateValidatorVersion = '5.1.2.Final'
  jacksonVersion = '2.3.3'
  javaxMailVersion = '1.4.7'
  jstlVersion = '1.2'
  junitVersion = '4.11'
  logbackVersion = '1.1.2'
  servletVersion = '2.5'
  shiroVersion = '1.2.3'
  slf4jVersion = '1.6.2'
	springDataJpaVersion = '1.5.2.RELEASE'
  springVersion = '3.2.8.RELEASE'
}

subprojects {
  project.ext {
    application = [
      properties: new Properties(),
      test: [ properties: new Properties() ]
    ]
    
    def app = file("src/main/resources/application.properties")
    if ( app.exists() ) {
      app.withInputStream { stream -> application.properties.load(stream) }
    }
    application.database = application.properties['jdbc.database']

    application.test.properties << application.properties
    app = file("src/test/resources/application.test.properties")
    if ( app.exists() ) {
      app.withInputStream { stream -> application.test.properties.load(stream) }
    }
    application.test.database = application.test.properties['jdbc.database']
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'sonar-runner'
  apply plugin: 'war'
  
  sonarRunner {
    sonarProperties {
      property "sonar.sourceEncoding", "UTF-8"
      property "sonar.host.url", "http://localhost:9000"
      property "sonar.jdbc.url", "jdbc:h2:tcp://localhost:9092/sonar"
      property "sonar.jdbc.driverClassName", "org.h2.Driver"
      property "sonar.username", "sonar"
      property "sonar.password", "sonar"
    }
  }

  configurations {
    jdbc
    h2
    mysql
    oracle
    db2
    sql_server
  }

  eclipse {
    classpath {
      defaultOutputDir = file("build/eclipse")
    }
  }

  sourceSets {
    main {
      java {
        def database = GLOBAL_CFG.baseProject.application.database
        
        srcDir 'src/main/java'
        if (database) {
          srcDir "src/${database.toLowerCase()}/java"
        }
      }
      resources {
        def database = GLOBAL_CFG.baseProject.application.database
        
        srcDir 'src/main/resources'
        if (database) {
          srcDir "src/${database.toLowerCase()}/resources"
        }
      }
    }
  }

  [compileJava, compileTestJava]*.options.collect { options -> 
    options.encoding = 'UTF-8'
  }

  dependencies {
    h2 "com.h2database:h2:1.3.171"
    mysql "mysql:mysql-connector-java:5.1.24"
    oracle files(new File(GLOBAL_CFG.lib, 'flat/oracle/ojdbc6.jar'))
    db2 files(new File(GLOBAL_CFG.lib, 'flat/db2/db2jcc.jar'))
    sql_server files(new File(GLOBAL_CFG.lib, 'flat/sql_server/sqljdbc4.jar'))

    def database = GLOBAL_CFG.baseProject.application.database
    if (database) {
      jdbc configurations[database.toLowerCase()]
    }

    database = GLOBAL_CFG.baseProject.application.test.database
    if (database) {
      testRuntime configurations[database.toLowerCase()]
    }
  }

  repositories {
    maven {
      url(new File(GLOBAL_CFG.lib, 'repository').toURI().toURL())
    }
    maven {
      url "http://localhost:8081/nexus/content/groups/public/"
    }
    mavenCentral name:'codehaus', artifactUrls: ["http://repository.codehaus.org/"]
    mavenCentral name:'ibiblio', artifactUrls: ["http://mirrors.ibiblio.org/pub/mirrors/maven2/"]
    mavenCentral name:'apache', artifactUrls: ["http://people.apache.org/repo/m2-ibiblio-rsync-repository/"]
    mavenCentral name:'maven', artifactUrls: ["http://repo2.maven.org/maven2/"]
    mavenCentral name:'restlet', artifactUrls: ["http://maven.restlet.org/"]
  }
}
